<div class="container fallback">
    <div class="modal" id="create-modal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Create Post</h4>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>
                <form action="/Posts/Create" method="post" enctype="multipart/form-data">
                    <textarea style="white-space: pre-wrap;resize: none;" name="Content" id="Content" class="form-control" autofocus></textarea>
                    <div id="embed-code"></div>
                    <div class="card">
                        <span>
                            <label>Add to your post</label>
                        </span>
                        <span>
                            <a class="btn btn-default" onclick="openFile(this);">
                                <i class='fa fa-camera'></i>
                            </a>
                        </span>
                    </div>
                    <input name="FileUpload.FormFiles" id="FileUpload.FormFiles" type="file" multiple style="display:none;" />
                    <div class="modal-footer">
                        <div class="form-group">
                            <input type="submit" value="Create" class="btn btn-primary" />
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<script>
    $().ready(function () {
        $('textarea#Content').on("keyup paste", function () {
            LinkExtractor();
        });
  
        $('.modal').on('shown.bs.modal', function () {
            $(this).find('[autofocus]').focus();
        });
    });
    function openFile(e) {
        $('input[type=file]').trigger('click');
    }
</script>
<style>
    .fallback {
        box-sizing: content-box;
        padding: 2px;
    }
    .dropzoneGlow {
        border-style: dashed;
        border-color: blue;
        padding: 1px;
    }
    .dropzoneGlow > dl > dd > .hidden {
        color: black;
    }
    .hidden {
        color: black;
    }
</style>
@section Scripts {
    <script src="/lib/jquery.filedrop.js"></script>
    <script>
    $().ready(function () {

        $('#dropzone').filedrop({
            fallback_id: 'upload_button',   // an identifier of a standard file input element, becomes the target of "click" events on the dropzone
            fallback_dropzoneClick: true,  // if true, clicking dropzone triggers fallback file selection and the fallback element is made invisible.
            url: 'upload.php',				// upload handler, handles each file separately, can also be a function taking the file and returning a url
            paramname: 'userfile',			// POST parameter name used on serverside to reference file, can also be a function taking the filename and returning the paramname
            withCredentials: true,			// make a cross-origin request with cookies
            data: {
                param1: 'value1', 			// send POST variables
                param2: function () {
                    return calculated_data; // calculate data at time of upload
                },
            },
            headers: { 			// Send additional request headers
                'header': 'value'
            },
            error: function (err, file) {
                switch (err) {
                    case 'BrowserNotSupported':
                        alert('browser does not support HTML5 drag and drop')
                        break;
                    case 'TooManyFiles':
                        // user uploaded more than 'maxfiles'
                        break;
                    case 'FileTooLarge':
                        // program encountered a file whose size is greater than 'maxfilesize'
                        // FileTooLarge also has access to the file which was too large
                        // use file.name to reference the filename of the culprit file
                        break;
                    case 'FileTypeNotAllowed':
                        // The file type is not in the specified list 'allowedfiletypes'
                        break;
                    case 'FileExtensionNotAllowed':
                        // The file extension is not in the specified list 'allowedfileextensions'
                        break;
                    default:
                        break;
                }
            },
            allowedfiletypes: ['image/jpeg', 'image/png', 'image/gif'],	// filetypes allowed by Content-Type.  Empty array means no restrictions
            allowedfileextensions: ['.jpg', '.jpeg', '.png', '.gif'], // file extensions allowed. Empty array means no restrictions
            maxfiles: 25,
            maxfilesize: 20, 	// max file size in MBs
            dragOver: function () {
                // user dragging files over #dropzone
            },
            dragLeave: function () {
                // user dragging files out of #dropzone
                $('body').css("cursor:default;");

            },
            docOver: function () {
                $('.fallback').addClass('dropzoneGlow');
                $('body').css("cursor:none;");

                // user dragging files anywhere inside the browser document window
            },
            docLeave: function () {
                $('.fallback').removeClass('dropzoneGlow');
                $('body').css("cursor:default;");

                // user dragging files out of the browser document window
            },
            drop: function () {
                $('.fallback').removeClass('dropzoneGlow');

                // user drops file
            },
            uploadStarted: function (i, file, len) {
                // a file began uploading
                // i = index => 0, 1, 2, 3, 4 etc
                // file is the actual file of the index
                // len = total files user dropped
            },
            uploadFinished: function (i, file, response, time) {
                // response is the data you got back from server in JSON format.
            },
            progressUpdated: function (i, file, progress) {
                // this function is used for large files and updates intermittently
                // progress is the integer value of file being uploaded percentage to completion
            },
            globalProgressUpdated: function (progress) {
                // progress for all the files uploaded on the current instance (percentage)
                // ex: $('#progress div').width(progress+"%");
            },
            speedUpdated: function (i, file, speed) {
                // speed in kb/s
            },
            rename: function (name) {
                // name in string format
                // must return alternate name as string
            },
            beforeEach: function (file) {
                // file is a file object
                // return false to cancel upload
            },
            beforeSend: function (file, i, done) {
                // file is a file object
                // i is the file index
                // call done() to start the upload
            },
            afterAll: function () {
                // runs after all files have been uploaded or otherwise dealt with
            }
        });
    });
    </script>
}