#pragma checksum "C:\Users\james\source\repos\www\Views\Posts\_Create.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "1edb7366680bd64f2db6a4a84a791d4296471b73"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Posts__Create), @"mvc.1.0.view", @"/Views/Posts/_Create.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\james\source\repos\www\Views\_ViewImports.cshtml"
using www;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\james\source\repos\www\Views\_ViewImports.cshtml"
using www.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1edb7366680bd64f2db6a4a84a791d4296471b73", @"/Views/Posts/_Create.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ef621fd50e38106041300085f77523b24bb6487b", @"/Views/_ViewImports.cshtml")]
    public class Views_Posts__Create : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("action", new global::Microsoft.AspNetCore.Html.HtmlString("/Posts/Create"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("method", "post", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("enctype", new global::Microsoft.AspNetCore.Html.HtmlString("multipart/form-data"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<div class=""container fallback"">
    <!-- The Modal -->
    <div class=""modal"" id=""create-modal"">
        <div class=""modal-dialog"">
            <div class=""modal-content"">
                <!-- Modal Header -->
                <div class=""modal-header"">
                    <h4 class=""modal-title"">Create Post</h4>
                    <button type=""button"" class=""close"" data-dismiss=""modal"">&times;</button>
                </div>
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "1edb7366680bd64f2db6a4a84a791d4296471b734631", async() => {
                WriteLiteral(@"
                    <!-- Modal body -->
                    <textarea style=""white-space: pre-wrap;resize: none;"" name=""Content"" id=""Content"" class=""form-control"" autofocus></textarea>
                    <div id=""embed-code""></div>
                    <div class=""card"">
                        <span>
                            <label>Add to your post</label>
                        </span>
                        <span>
                            <a class=""btn btn-default"" onclick=""openFile(this);"">
                                <i class='fa fa-camera'></i>
                            </a>
                        </span>
                    </div>
                    <input name=""FileUpload.FormFiles"" id=""FileUpload.FormFiles"" type=""file"" multiple style=""display:none;"" />
                    <!-- Modal footer -->
                    <div class=""modal-footer"">
                        <div class=""form-group"">
                            <input type=""submit"" value=""Create"" class=""btn btn-");
                WriteLiteral("primary\" />\r\n                        </div>\r\n                    </div>\r\n                ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Method = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </div>
        </div>
    </div>
</div>
<script>
    $().ready(function () {
        $('textarea#Content').on(""keyup paste"", function () {
            LinkExtractor();
        });
    });
    $().ready(function () {
        $('.modal').on('shown.bs.modal', function () {
            $(this).find('[autofocus]').focus();
        });
    });
</script>
<script>
    function openFile(e) {
        $('input[type=file]').trigger('click');
    }
</script>
<style>
    .fallback {
        box-sizing: content-box;
        padding: 2px;
    }
    .dropzoneGlow {
        border-style: dashed;
        border-color: blue;
        padding: 1px;
    }
    .dropzoneGlow > dl > dd > .hidden {
        color: black;
    }
    .hidden {
        color: black;
    }
</style>
");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"
    <script src=""/lib/jquery.filedrop.js""></script>
    <script>
    $().ready(function () {

        $('#dropzone').filedrop({
            fallback_id: 'upload_button',   // an identifier of a standard file input element, becomes the target of ""click"" events on the dropzone
            fallback_dropzoneClick: true,  // if true, clicking dropzone triggers fallback file selection and the fallback element is made invisible.
            url: 'upload.php',				// upload handler, handles each file separately, can also be a function taking the file and returning a url
            paramname: 'userfile',			// POST parameter name used on serverside to reference file, can also be a function taking the filename and returning the paramname
            withCredentials: true,			// make a cross-origin request with cookies
            data: {
                param1: 'value1', 			// send POST variables
                param2: function () {
                    return calculated_data; // calculate data at time of ");
                WriteLiteral(@"upload
                },
            },
            headers: { 			// Send additional request headers
                'header': 'value'
            },
            error: function (err, file) {
                switch (err) {
                    case 'BrowserNotSupported':
                        alert('browser does not support HTML5 drag and drop')
                        break;
                    case 'TooManyFiles':
                        // user uploaded more than 'maxfiles'
                        break;
                    case 'FileTooLarge':
                        // program encountered a file whose size is greater than 'maxfilesize'
                        // FileTooLarge also has access to the file which was too large
                        // use file.name to reference the filename of the culprit file
                        break;
                    case 'FileTypeNotAllowed':
                        // The file type is not in the specified list 'allowedfiletypes'
          ");
                WriteLiteral(@"              break;
                    case 'FileExtensionNotAllowed':
                        // The file extension is not in the specified list 'allowedfileextensions'
                        break;
                    default:
                        break;
                }
            },
            allowedfiletypes: ['image/jpeg', 'image/png', 'image/gif'],	// filetypes allowed by Content-Type.  Empty array means no restrictions
            allowedfileextensions: ['.jpg', '.jpeg', '.png', '.gif'], // file extensions allowed. Empty array means no restrictions
            maxfiles: 25,
            maxfilesize: 20, 	// max file size in MBs
            dragOver: function () {
                // user dragging files over #dropzone
            },
            dragLeave: function () {
                // user dragging files out of #dropzone
                $('body').css(""cursor:default;"");

            },
            docOver: function () {
                $('.fallback').addClass('dropzoneGl");
                WriteLiteral(@"ow');
                $('body').css(""cursor:none;"");

                // user dragging files anywhere inside the browser document window
            },
            docLeave: function () {
                $('.fallback').removeClass('dropzoneGlow');
                $('body').css(""cursor:default;"");

                // user dragging files out of the browser document window
            },
            drop: function () {
                $('.fallback').removeClass('dropzoneGlow');

                // user drops file
            },
            uploadStarted: function (i, file, len) {
                // a file began uploading
                // i = index => 0, 1, 2, 3, 4 etc
                // file is the actual file of the index
                // len = total files user dropped
            },
            uploadFinished: function (i, file, response, time) {
                // response is the data you got back from server in JSON format.
            },
            progressUpdated: function (i,");
                WriteLiteral(@" file, progress) {
                // this function is used for large files and updates intermittently
                // progress is the integer value of file being uploaded percentage to completion
            },
            globalProgressUpdated: function (progress) {
                // progress for all the files uploaded on the current instance (percentage)
                // ex: $('#progress div').width(progress+""%"");
            },
            speedUpdated: function (i, file, speed) {
                // speed in kb/s
            },
            rename: function (name) {
                // name in string format
                // must return alternate name as string
            },
            beforeEach: function (file) {
                // file is a file object
                // return false to cancel upload
            },
            beforeSend: function (file, i, done) {
                // file is a file object
                // i is the file index
                // call done()");
                WriteLiteral(" to start the upload\r\n            },\r\n            afterAll: function () {\r\n                // runs after all files have been uploaded or otherwise dealt with\r\n            }\r\n        });\r\n    });\r\n    </script>\r\n");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
